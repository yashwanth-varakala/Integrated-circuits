library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity Dataflow is
	port ( 
		   Data_a : in std_logic_vector(7 downto 0);
		   Data_b : in std_logic_vector(5 downto 0);
		   Q   : in std_logic_vector(4 downto 0);
		   clk2 : in std_logic;
		   Rstn : in std_logic;
		   EN_D : in std_logic;
		   EN_M : in std_logic;
		   D_OUT : out std_logic_vector(13 downto 0);
		   D2_OUT : out std_logic_vector(10 downto 0)
		   
		   );
end entity;

architecture behave of Dataflow is
signal ff_a : std_logic_vector(7 downto 0) := (others => '0');
signal ff_b : std_logic_vector(5 downto 0) := (others => '0');
signal ff_Q : std_logic_vector(4 downto 0) := (others => '0');
signal Add : std_logic_vector(8 downto 0) := (others => '0');
signal Mul : std_logic_vector(13 downto 0) := (others => '0');
signal Add2 : std_logic_vector(8 downto 0) := (others => '0');
signal Mul2 : std_logic_vector(10 downto 0) := (others => '0');
signal Mux1 : std_logic_vector(13 downto 0) := (others => '0');
signal Mux2 : std_logic_vector(10 downto 0) := (others => '0');
signal ff_dout : std_logic_vector(13 downto 0) := (others => '0');
signal ff_d2out : std_logic_vector(10 downto 0) := (others => '0');

begin

proc_1 : process(clk2,Rstn)
begin
        if Rstn <= '0' then  
		   
		   ff_a <= (others => '0');
		   ff_b <= (others => '0');
		   ff_Q <= (others => '0');
		elsif (rising_edge(clk2)) then
           ff_a <= Data_a;
           ff_b <= Data_b;
           ff_Q <= Q;		   
		end if;
  	
end process;


Add <= ext(ff_a, 9) + ext(ff_b, 9);
Mul <= ff_a * ff_b;
Add2 <= ext(ff_a, 9) + ext(ff_Q, 9);
Mul2 <= ff_b * ff_Q;


proc_2 : process(clk2,Rstn)
begin
        if Rstn <= '0' then  
		   
		   ff_a <= (others => '0');
		   ff_b <= (others => '0');
		   ff_Q <= (others => '0');
		elsif (rising_edge(clk2)) then
           ff_a <= Data_a;
           ff_b <= Data_b;
           ff_Q <= Q;		   
		end if;
  	
end process;

proc_mux : process(EN_D)
begin
        if EN_D = '1' then  
		   
		   Mux1 <= Add;
		else
           Mux1 <= Mul;	   
		end if;
  	
end process;

proc_mux2 : process(EN_M)
begin
        if EN_M = '1' then  
		   
		   Mux2 <= Add2;
		else
           Mux2 <= Mul2;	   
		end if;
  	
end process;

proc_ffdout : process(clk2,Rstn)
begin
        if Rstn <= '0' then  
		   
		   
		   ff_dout<= (others => '0');
		elsif (rising_edge(clk2)) then
           ff_dout <= Mux1;
           	   
		end if;
  	
end process;

proc_ffd2out : process(clk2,Rstn)
begin
        if Rstn= '0' then  
		   
		   
		   ff_d2out<= (others => '0');
		elsif (rising_edge(clk2)) then
           ff_d2out <= Mux2;
           	   
		end if;
		
D_OUT <= ff_dout;
D2_OUT <= ff_d2out;		
  	
end process;
end behave;



